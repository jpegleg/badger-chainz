#!/usr/bin/env bash

exec 100>/opt/badger-chainz/workspace/.badger.lock || exit 1
flock 100 || exit 1

previousblock () {
  # make a hash of the previous block
  export seed="$(tail -n3 blch.chain | sha256sum | cut -d' ' -f1)"
}

derive () {
  openssl pkeyutl -derive -inkey chain.key -peerkey peerpub.pem -out secret.bin || logger "badger-chainz error return code $? - exit on derive function..."
}

transaction () {
  stamp=$(date +%Y%m%d%H%M%S%N)
  previousblock
  derive
  echo $DATASEGMENT | openssl enc -pbkdf2 -aes256 -base64 -k $(base64 secret.bin) | gpg --cipher=aes256 --always-trust --batch --armor -r PGPEMAIL --yes -e > TEMPLATEINSTANCENAME.$stamp.enc
  echo $DATASEGMENT | sha512sum | cut -d' ' -f1
}

main () {
  transaction || logger "badger-chainz error return code $? - exit on transaction function..."
  act=TEMPLATEINSTANCENAME
  openssl rsautl -verify -in TEMPLATEINSTANCENAME.sig -inkey TEMPLATEINSTANCENAME.rsa.pub -pubin | openssl enc -pbkdf2 -aes256 -base64 -k $(base64 secret.bin) >> blch.chain || exit 1
  echo "$(date +%Y%m%d%H%M%S%N), $act, $(cat peerpub.pem | xxd -p | tr -d '\n'), $seed, $(sha512sum secret.bin | cut -d' ' -f1), $(md5sum chain.key | cut -d' ' -f1), $(md5sum secret-rsa.pem | cut -d' ' -f1)" | gpg --cipher=aes256 --always-trust --batch --armor -r PGPEMAIL --yes -e | xxd -p | tr -d '\n' >> blch.chain
  echo >> blch.chain
  sha1sum blch.chain | cut -d' ' -f1 > blch.chain.sha1
  openssl rsautl -sign -in blch.chain.sha1 -inkey secret-rsa.pem -out blch.sign
  cat blch.sign | base64 | tr -d '\n' >> blch.history
  echo >> blch.history
}

cd /opt/badger-chainz/workspace/

while read uinput; do
 export DATASEGMENT=$uinput
done<&0
echo $1 | xxd -r -p > peerpub.pem
main $DATASEGMENT || logger "badger-chainz error return code $? - exit on main function..."

