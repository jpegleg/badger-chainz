#!/usr/bin/env bash

linesx () {
  val=$(tput cols)
  x=1
  while [ $x -le $val ]; do
    echo -n ðŸ¦¡
    x=$((x+1));
  done
}

reset

export builddr=$(pwd)

    echo
    echo -e "\e[1;32m B A D G E R - C H A I N Z \e[39m interactive installer\e[0m"
    echo
    linesx
    echo "Installation $(date)"
    echo "$(hostname)"
    echo "starting $(sha256sum badger-chainz-secret-mode)" | logger
    echo "starting $(sha256sum badger-chainz-secret-mode)"
    echo "starting $(sha256sum badger-chainz)" | logger
    echo "starting $(sha256sum badger-chainz)"
    echo "starting $(sha256sum chainz.cfg)" | logger
    echo "starting $(sha256sum chainz.cfg)"
    echo "starting $(sha256sum badger-weblog.cfg)" | logger
    echo "starting $(sha256sum badger-weblog.cfg)"
    echo "starting $(sha256sum badger-weblog)" | logger
    echo "starting $(sha256sum badger-weblog)"
    echo

# Requirements that this installer will not install by design
    echo "checking for dependencies gpg, sec, and openssl..."
    echo "if the script gets stuck here, hit control+c and install gpg, sec, and openssl first."
    echo
    
sha256sum $(which sec) || exit 1
sha256sum $(which sec) | logger
sha256sum $(which openssl) || exit 1
sha256sum $(which openssl) | logger
sha256sum $(which gpg) || exit 1
sha256sum $(which gpg) | logger

    echo
    echo "Type 'logonly' to install badger chains in encrypted-logs-only mode without a transaction block chain, otherwise hit enter to continue or control+c to abort install script."

read weblogmode

if [ "$weblogmode" = "logonly" ]; then

    echo "badger-weblog installing..." | logger
    echo "badger-weblog installing..."
    echo "    chmod +x badger-weblog" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     chmod +x badger-weblog"

  chmod +x badger-weblog || exit 1

    echo "    cp badger-weblog /usr/local/sbin/badger-chainz" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     cp badger-weblog /usr/local/sbin/badger-chainz"

  cp badger-weblog /usr/local/sbin/badger-chainz || exit 1

    echo "    mkdir -p /opt/badger-chainz/workspace/" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     mkdir -p /opt/badger-chainz/workspace/"

  mkdir -p /opt/badger-chainz/workspace/

    echo "    mkdir -p /opt/badger-chainz/etc/" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     mkdir -p /opt/badger-chainz/etc/"

  mkdir -p /opt/badger-chainz/etc/

    echo "    cp weblog.cfg /opt/badger-chainz/etc/" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     cp weblog.cfg /opt/badger-chainz/etc/"

  cp badger-weblog.cfg /opt/badger-chainz/etc/ || exit 1

    echo
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)    entering /opt/badger-chainz/workspace/" | logger
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)     entering /opt/badger-chainz/workspace/"

else

  chmod +x badger-chainz
  cp badger-chainz /usr/local/sbin/

    echo
    echo -e "\e[1;33mTime to setup the client public key. Paste in a single line of serialized hex encoded secp384r1 public key."
    echo -e "\e[1;33mThe Client side of the badger-chainz generates a secp384r1 key pair: openssl ecparam -name secp384r1 -genkey -noout -out secp384r1.pem; openssl ec -in secp384r1.pem -pubout -out peerpub.pem"
    echo -e "\e[1;33mThe peerpub.pem is then provided to you right now, or before now, or if you are the Client, you can generate this content on your Client side machine/devices."
    echo -e "\e[1;33mThen before you paste in this Client public key, make it a single line of hex, like so:"
    echo -e "\e[1;32mcat peerpub.pem | xxd -p | tr -d '\\\n'"
    echo -e "\e[1;33mCopy the result of that on to your clipboard buffer and paste it in to the installer then press return."
    echo -e "\e[0m"

    read HEXPUB

    echo
    echo -e "\e[1;39m$(date +%Y%m%d:%H:%M:%S)     validating that the provided secp384r1 public key is a valid key..."
    echo


  echo $HEXPUB | xxd -r -p > client-setup-pub.pem
  openssl ecparam -name secp384r1 -genkey -noout -out validation.pem
  openssl pkeyutl -derive -inkey validation.pem -peerkey client-setup-pub.pem -out secret.bin || exit 1
  cp chainz.cfg chainz.cfg.edit
  sed -i "s/HEXCUSTPUBKEY/$HEXPUB/g" chainz.cfg.edit || exit 1
  rm -f validation.pem secret.bin

    echo
    echo -e "\e[1;39mDo you want to deploy secret mode? Enter Y or N then press enter to continue."
    echo
    read secretmode
    echo

if [ $secretmode = Y ]; then

    echo
    echo -e "\e[1;32mIf you are going to deploy secret mode (encrypt additionally with GPG/PGP key), then be sure to import that public key into $(whoami) keyring. Example:"
    echo
    echo -e "\e[1;33m  gpg --import /tmp/public_gpg_from_remote_admin.asc"
    echo
    echo -e "\e[1;32mAnd then paste in the key id or key email here and press the enter key. If you are not going to use secret mode, then simply press enter."
    echo -e "\e[0m"

  read pgpml

    echo

  cp badger-chainz-secret-mode badger-chainz-secret-mode.edit
  sed -i "s/PGPEMAIL/$pgpml/g" badger-chainz-secret-mode.edit

    echo
    echo -e "\e[1;32m$(date +%Y%m%d:%H:%M:%S)     Overwriting with secret mode:     cp badger-chainz-secret-mode.edit /usr/local/sbin/badger-chainz"
    echo

  chmod +x badger-chainz-secret-mode.edit
  cp badger-chainz-secret-mode.edit /usr/local/sbin/badger-chainz

else

  secretmode=N

    echo
    echo -e "\e[1;31$(date +%Y%m%d:%H:%M:%S)     Not using secret mode."
    echo
    echo

fi

  mkdir -p /opt/badger-chainz/workspace/

    echo "$(date +%Y%m%d:%H:%M:%S)     mkdir -p /opt/badger-chainz/etc/" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     mkdir -p /opt/badger-chainz/etc/"

  mkdir -p /opt/badger-chainz/etc/

    echo "$(date +%Y%m%d:%H:%M:%S)     cp chainz.cfg.edit /opt/badger-chainz/etc/chainz.cfg" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     cp chainz.cfg.edit /opt/badger-chainz/etc/chainz.cfg"

  cp chainz.cfg.edit /opt/badger-chainz/etc/chainz.cfg || exit 1

    echo
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)     entering /opt/badger-chainz/workspace/" | logger
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)    entering /opt/badger-chainz/workspace/"
    echo

  cd /opt/badger-chainz/workspace

    echo
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)     generating RSA signing private key: secret-rsa.pem"
    linesx

  openssl genrsa 4096 > secret-rsa.pem

    echo
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)     generating secp384r1 curve private key: secp384r1.pem"
    linesx

  openssl ecparam -name secp384r1 -genkey -noout -out secp384r1.pem

    echo
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)     extracting secp384r1 public key : secp384r1.pub"
    linesx

  openssl ec -in secp384r1.pem -pubout -out secp384r1.pub

    echo
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)     setting secp384r1.pem as the chain.key: cp secp384r1.pem chain.key"
    linesx

  cp secp384r1.pem chain.key

    echo
    echo -e "\e[1;36m$(date +%Y%m%d:%H:%M:%S)     setting secret-rsa.pem as the rsa.pem: cp secret-rsa.pem rsa.pem"
    linesx

  cp secret-rsa.pem rsa.pem


fi

# If NGINX

if [ -d /var/log/nginx ]; then

    echo "executing..." | logger
    echo "executing..."
    echo "$(date +%Y%m%d:%H:%M:%S)     rm -f /var/log/nginx/access.log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     rm -f /var/log/nginx/access.log"

rm -f /var/log/nginx/access.log

    echo "$(date +%Y%m%d:%H:%M:%S)     mkfifo /var/log/nginx/access.log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     mkfifo /var/log/nginx/access.log"

mkfifo /var/log/nginx/access.log

    echo "$(date +%Y%m%d:%H:%M:%S)     exec 4<>/var/log/nginx/access.log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     exec 4<>/var/log/nginx/access.log"

exec 4<>/var/log/nginx/access.log

    echo "$(date +%Y%m%d:%H:%M:%S)     chown www-data:root /var/log/nginx/access.log" 

chown www-data:root /var/log/nginx/access.log
   
    echo "$(date +%Y%m%d:%H:%M:%S)     restarting nginx"   
    
systemctl restart nginx || /etc/init.d/nginx restart || echo "could not restart nginx"

     linesx

fi

# httpd block

if [ -d /var/log/httpd/ ]; then

    echo "executing..." | logger
    echo "executing..."
    echo "$(date +%Y%m%d:%H:%M:%S)     rm -f /var/log/httpd/access_log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     rm -f /var/log/httpd/access_log"

rm -f /var/log/httpd/access_log

    echo "$(date +%Y%m%d:%H:%M:%S)     mkfifo /var/log/httpd/access_log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     mkfifo /var/log/httpd/access_log"

mkfifo /var/log/httpd/access_log

    echo "$(date +%Y%m%d:%H:%M:%S)     exec 4<>/var/log/httpd/access_log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     exec 4<>/var/log/httpd/access_log"

exec 4<>/var/log/httpd/access_log

    echo "$(date +%Y%m%d:%H:%M:%S)     restarting httpd"

systemctl restart httpd || /etc/init.d/httpd restart || echo "could not restart httpd"

    linesx

fi

# apache2 block

if [ -d /var/log/apache2/ ]; then

    echo "executing..." | logger
    echo "executing..."
    echo "$(date +%Y%m%d:%H:%M:%S)     rm -f /var/log/apache2/access.log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     rm -f /var/log/apache2/access.log"

rm -f /var/log/apache2/access.log

    echo "$(date +%Y%m%d:%H:%M:%S)     mkfifo /var/log/apache2/access.log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     mkfifo /var/log/apache2/access.log"

mkfifo /var/log/apache2/access.log

    echo "$(date +%Y%m%d:%H:%M:%S)     exec 4<>/var/log/apache2/access.log" | logger
    echo "$(date +%Y%m%d:%H:%M:%S)     exec 4<>/var/log/apache2/access.log"

exec 4<>/var/log/apache2/access.log

    echo "$(date +%Y%m%d:%H:%M:%S)     restarting apache2"

systemctl restart apache2 || /etc/init.d/apache2 restart || echo "could not restart apache2"

    linesx

fi

    echo
    echo
    echo -e "\e[0m$(date +%Y%m%d:%H:%M:%S)     Returning to build dir $builddr"

cd $builddr

if [ "$weblogmode" = "logonly" ]; then
    echo "deployment $(sha256sum badger-chainz)" | logger
    echo "deployment $(sha256sum badger-chainz)"
    echo "deployment $(sha256sum chainz.cfg)" | logger
    echo "deployment $(sha256sum chainz.cfg)"
    chmod +x badger-weblog-enforce
    cp badger-weblog-enforce /usr/local/sbin/
    /usr/local/sbin/badger-weblog-enforce
    grep badger-weblog-enforce /etc/crontab || echo "*/1 * * * * root /usr/local/sbin/badger-weblog-enforce >/dev/null 2>&1" >> /etc/crontab
  elif [ $secretmode = Y ]; then
    echo "deployment $(sha256sum badger-chainz-secret-mode)" | logger
    echo "deployment $(sha256sum badger-chainz-secret-mode)"
    echo "deployment $(sha256sum chainz.cfg)" | logger
    echo "deployment $(sha256sum chainz.cfg)"
    chmod +x badger-enforce
    cp badger-enforce /usr/local/sbin/
    /usr/local/sbin/badger-enforce
    grep badger-enforce /etc/crontab || echo "*/1 * * * * root /usr/local/sbin/badger-enforce >/dev/null 2>&1" >> /etc/crontab
  else
    echo "deployment $(sha256sum badger-weblog)" | logger
    echo "deployment $(sha256sum badger-weblog)"
    echo "deployment $(sha256sum badger-weblog.cfg)" | logger
    echo "deployment $(sha256sum badger-weblog.cfg)"
    chmod +x badger-enforce
    cp badger-enforce /usr/local/sbin/
    /usr/local/sbin/badger-enforce
    grep badger-enforce /etc/crontab || echo "*/1 * * * * root /usr/local/sbin/badger-enforce >/dev/null 2>&1" >> /etc/crontab
fi

    echo
    for color in 196 208 226 118 21 54 128 ; do
      printf "\e[48;5;%sm%*s" $color "${COLUMNS:-$(tput cols)}" '' | tr ' ' ' '
    done
    echo -e "\e[0m"
    echo
    echo -e "\e[1;32m$(date +%Y%m%d:%H:%M:%S)   Install complete!\e[0m"
    echo
    echo
    echo "Admin checklist:"
    echo
    echo -e "\e[1;32mâ†’ \e[0mensure the web server configurations are using the fifo access.log, if not make more fifos or change the webserver to align"
    echo -e "\e[1;32mâ†’ \e[0mwebservices restart and upgrade correctly with the fifo in place"
    echo -e "\e[1;32mâ†’ \e[0mensure any keys being used are properly tracked/backed-up"
    echo -e "\e[1;32mâ†’ \e[0mvalidate the configuration is working by submitting web requests"
    echo
    echo "Enjoy! Contact carefuldata@protonmail.com for more information or assistance."
    echo

